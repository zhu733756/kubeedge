name: Main CI WorkFlow

on:
  push:
    branches:
      - master
    tags:
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    name: Verify vendor, licenses, do lint
    env:
      GOPATH: /home/runner/work/${{ github.repository }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.x

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: ./src/github.com/${{ github.repository }}

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Install dependences
        run: |
          sudo apt-get install -y jq

      - name: Run verify test
        run: make verify
        working-directory: ./src/github.com/${{ github.repository }}

      - name: Run lint test
        run: make lint
        working-directory: ./src/github.com/${{ github.repository }}
  build:
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    name: Multiple build
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.x

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Install dependences
        run: |
          sudo apt-get update
          sudo apt-get install -y upx-ucl gcc-aarch64-linux-gnu libc6-dev-arm64-cross gcc-arm-linux-gnueabi libc6-dev-armel-cross

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - run: make

      - run: make smallbuild

      - run: make crossbuild

      - run: make crossbuild GOARM=GOARM7

  basic_test:
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    name: Unit test, integration test edge
    env:
      GO111MODULE: on
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.x

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Install dependences
        run: |
          command -v ginkgo || go install github.com/onsi/ginkgo/ginkgo@latest

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - run: make test

      - run: make integrationtest

  e2e_test:
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    name: E2e test
    env:
      GO111MODULE: on
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.x

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Install dependences
        run: |
          command -v ginkgo || go install github.com/onsi/ginkgo/ginkgo@latest
          go install sigs.k8s.io/kind@v0.11.1
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.19.3/bin/linux/amd64/kubectl && sudo install kubectl /usr/local/bin/kubectl

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - run: make e2e

  keadm_e2e_test:
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    name: Keadm e2e test
    env:
      GO111MODULE: on
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.x

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Install dependences
        run: |
          command -v ginkgo || go install github.com/onsi/ginkgo/ginkgo@latest
          go install sigs.k8s.io/kind@v0.11.1
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.19.3/bin/linux/amd64/kubectl && sudo install kubectl /usr/local/bin/kubectl
          export RELEASE_VERSION=$(wget -qO - https://kubeedge.io/latestversion | cat)
          sudo wget -qP /etc/kubeedge https://github.com/kubeedge/kubeedge/releases/download/${RELEASE_VERSION}/checksum_kubeedge-${RELEASE_VERSION}-linux-amd64.tar.gz.txt
          sudo wget -qP /etc/kubeedge https://github.com/kubeedge/kubeedge/releases/download/${RELEASE_VERSION}/kubeedge-${RELEASE_VERSION}-linux-amd64.tar.gz
          echo "$(cat /etc/kubeedge/checksum_kubeedge-${RELEASE_VERSION}-linux-amd64.tar.gz.txt) /etc/kubeedge/kubeedge-${RELEASE_VERSION}-linux-amd64.tar.gz" | sha512sum -c

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - run: make keadm_e2e

  docker_build:
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    name: Multiple docker image build
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.x

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - run: make cloudimage

      - run: make admissionimage

      - run: make edgeimage ARCH="amd64"

      - run: make edgesite-agent-image ARCH="amd64"

      - run: make edgesite-server-image ARCH="amd64"

      - run: make iptablesmgrimage

  helm-ci:
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    name: Test helm install and uninstall
    env: 
      CLUSTER_NAME: kubeedge-chart
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.x

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0

      - name: Create kind cluster
        uses: helm/kind-action@v1.2.0
        with:
          config: .github/workflows/kind/kind.yaml
          cluster_name: ${{ env.CLUSTER_NAME }}
      
      - name: Set environmental variables
        run: |
          NODE_IP=$(kubectl get nodes -o jsonpath={.items[0].status.addresses[0].address})
          echo "NODE_IP=$NODE_IP" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(date +%Y%m%d)" >> $GITHUB_ENV

      - name: Build cloudimage
        run: |
          make cloudimage -e IMAGE_TAG=${IMAGE_TAG}
          kind load docker-image kubeedge/cloudcore:${IMAGE_TAG} --name ${CLUSTER_NAME}

      - name: Setting up kubeedge cloudcore
        run: |
          cd build/helm && helm upgrade --install cloudcore ./cloudcore --namespace kubeedge --create-namespace -f ./cloudcore/values.yaml --set cloudCore.modules.cloudHub.advertiseAddress[0]=${NODE_IP} --set cloudCore.image.tag=${IMAGE_TAG}
      
      - name: Waiting for 10 seconds to keep cloudcore installed
        uses: jakejarvis/wait-action@master
        with:
          time: '10s'

      - name: Check cloudcore status
        run: |
          status=`kubectl get pods -n kubeedge | grep -i "cloudcore" |awk '{ print $3 }'`
          if [ "$status" != "Running" ]; then
             echo "The cloudcore cannot work normally..."
             kubectl -n kubeedge logs -l kubeedge=cloudcore | egrep -i "error|warn"
             exit 1
          fi
        
      - name: Uninstall cloudcore
        run: |
          helm uninstall cloudcore -n kubeedge
          kubectl delete ns kubeedge

